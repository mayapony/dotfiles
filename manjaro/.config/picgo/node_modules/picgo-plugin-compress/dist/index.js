"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var image_size_1 = require("image-size");
var path = __importStar(require("path"));
var tinypngweb_1 = require("./compress/tinypngweb");
var index_1 = require("./compress/tinypng/index");
var imagemin_1 = require("./compress/imagemin");
var imagemin_webp_1 = require("./compress/imagemin_webp");
var config_1 = require("./config");
var reName_1 = require("./utils/reName");
var luban_1 = require("./compress/luban");
var lubanforgitee_1 = require("./compress/lubanforgitee");
//npm install /Users/hss/github/picgo-plugin-compress
function handle(ctx) {
    var config = ctx.getConfig('transformer.compress') || ctx.getConfig('picgo-plugin-compress');
    var compress = config === null || config === void 0 ? void 0 : config.compress;
    var nameType = config === null || config === void 0 ? void 0 : config.nameType;
    var key = config.key || config.tinypngKey;
    var tasks = ctx.input
        .map(function (imageUrl) {
        return {
            url: imageUrl,
            fileName: reName_1.reName(nameType, imageUrl),
            extname: path.extname(imageUrl),
        };
    })
        .map(function (info) {
        var options = { ctx: ctx, info: info };
        ctx.log.warn('compress type:' + compress);
        return Promise.resolve()
            .then(function () {
            switch (compress) {
                case config_1.CompressType.tinypng:
                    return key ? index_1.tinypngKeyCompress(__assign(__assign({}, options), { key: key })) : tinypngweb_1.tinypngCompress(options);
                case config_1.CompressType.imagemin:
                    return imagemin_1.imageminCompress(options);
                case config_1.CompressType.luban:
                    return luban_1.lubanCompress(options);
                case config_1.CompressType.lubangitee:
                    return lubanforgitee_1.lubanforgiteeCompress(options);
                case config_1.CompressType.imagemin_webp:
                    return imagemin_webp_1.imageminWebPCompress(options);
                default:
                    return luban_1.lubanCompress(options);
            }
        })
            .then(function (info) {
            var _a = image_size_1.imageSize(info.buffer), width = _a.width, height = _a.height;
            var buffer = info.buffer, extname = info.extname, fileName = info.fileName;
            return {
                buffer: buffer,
                extname: extname,
                fileName: fileName,
                width: width,
                height: height,
            };
        });
    });
    return Promise.all(tasks).then(function (output) {
        ctx.output = output;
        return ctx;
    });
}
module.exports = function (ctx) {
    return {
        transformer: 'compress',
        register: function () {
            ctx.helper.transformer.register('compress', {
                handle: handle,
            });
        },
        config: function (ctx) {
            var config = ctx.getConfig('transformer.compress') || ctx.getConfig('picgo-plugin-compress');
            if (!config) {
                config = {};
            }
            return [
                {
                    name: 'compress',
                    type: 'list',
                    message: '选择压缩库',
                    choices: Object.keys(config_1.CompressType),
                    default: config.compress || config_1.CompressType.tinypng,
                    required: true,
                },
                {
                    name: 'key',
                    type: 'input',
                    message: '申请key，不填默认使用WebApi，逗号隔开，可使用多个Key叠加使用次数',
                    default: config.key || config.tinypngKey || null,
                    required: false,
                },
                {
                    name: 'nameType',
                    type: 'list',
                    message: '是否重命名成时间戳',
                    choices: Object.keys(config_1.NameType),
                    default: config.nameType || config_1.NameType.none,
                    required: false,
                },
            ];
        },
    };
};
