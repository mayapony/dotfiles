"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tinypngCompress = void 0;
var config_1 = require("../config");
var getImage_1 = require("../utils/getImage");
function getHeaders() {
    var v = 59 + Math.round(Math.random() * 10);
    var v2 = Math.round(Math.random() * 100);
    return {
        origin: config_1.TINYPNG_WEBUPLOAD_URL,
        referer: config_1.TINYPNG_WEBUPLOAD_URL,
        'content-type': 'application/x-www-form-urlencoded',
        'user-agent': "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/" + v + ".0.4044." + v2 + " Safari/537.36",
    };
}
function tinypngCompress(_a) {
    var ctx = _a.ctx, info = _a.info;
    ctx.log.info('TinypngWeb 开始上传');
    return getImage_1.getImageBuffer(ctx, info.url).then(function (buffer) {
        var req = ctx.Request.request({
            url: config_1.TINYPNG_WEBUPLOAD_URL,
            method: 'POST',
            headers: getHeaders(),
            resolveWithFullResponse: true,
        });
        req.end(buffer);
        return req
            .then(function (data) {
            if (data.headers.location) {
                ctx.log.info('TinypngWeb 上传成功:' + data.headers.location);
                return getImage_1.getImageBuffer(ctx, data.headers.location);
            }
            throw new Error('TinypngWeb 上传失败');
        })
            .then(function (buffer) {
            return __assign(__assign({}, info), { buffer: buffer });
        });
    });
}
exports.tinypngCompress = tinypngCompress;
